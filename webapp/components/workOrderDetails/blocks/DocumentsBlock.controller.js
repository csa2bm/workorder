sap.ui.define([	"com/twobm/mobileworkorder/util/Controller",	"sap/ui/model/json/JSONModel"], function(Controller, JSONModel) {	"use strict";	return Controller.extend("com.twobm.mobileworkorder.components.workOrderDetails.blocks.DocumentsBlock", {		onInit: function() {},		formatDateTimeShort: function(oValue) {			var dateFormat = sap.ui.core.format.DateFormat.getDateInstance({				pattern: "dd/MM/yyyy"			});			if (oValue) {				// timezoneOffset is in hours convert to milliseconds  				var TZOffsetMs = new Date(0).getTimezoneOffset() * 60 * 1000;				return dateFormat.format(new Date(oValue.getTime() + TZOffsetMs)); //05-12-2012  			} else {				return "";			}		},		downloadDocument: function(oEvent) {			var currentObject = oEvent.getSource().getBindingContext().getObject();			var fileUrl = currentObject.__metadata.media_src;                             			var fileTransfer = new FileTransfer();			var uri = encodeURI(fileUrl);			var isHybridApp = this.getView().getModel("device").getData().isHybridApp;			var directoryUrl;			if (isHybridApp) {				var platformName = window.cordova.require("cordova/platform").id;				if (platformName === "ios") {					directoryUrl = cordova.file.documentsDirectory;				} else if (platformName === "windows") {					directoryUrl = cordova.file.dataDirectory;				}                var fullpath = directoryUrl + encodeURI(currentObject.Filename);				fileTransfer.download(					uri,					fullpath,					function(entry) {						console.log("download complete: " + entry.toURL());					},					function(error) {						console.log("download error source " + error.source);						console.log("download error target " + error.target);						console.log("download error code" + error.code);					},					false, {}				);			} else {				window.open(uri);			}		},		viewDocument: function(oEvent) {				var directoryUrl;				var currentObject = oEvent.getSource().getBindingContext().getObject();				var platformName = window.cordova.require("cordova/platform").id;				if (platformName === "ios") {					directoryUrl = cordova.file.documentsDirectory;					window.open(directoryUrl + encodeURI(currentObject.Filename));				} else if (platformName === "windows") {					//directoryUrl = cordova.file.dataDirectory;					var applicationData = Windows.Storage.ApplicationData.current;					var localFolder = applicationData.localFolder;					var fullFileName = localFolder + encodeURI(currentObject.Filename);					//grab the file and return a promise					localFolder.getFileAsync(fullFileName)						.then(function(file) {							//launch the file - this command will let the OS use it's default PDF reader - win 8 app 'reader' works great.							Windows.System.Launcher.launchFileAsync(file);						});				}			}									/*			doFileExist: function(fileName){				var isHybridApp = this.getView().getModel("device").getData().isHybridApp;								var platformName = window.cordova.require("cordova/platform").id;								if(isHybridApp){					if(platformName === "ios"){						storagePath = cordova.file.documentsDirectory + fileName;												var successCallback = function(data){													}												window.resolveLocalFileSystemURL(storagePath, successCallback, downloadAsset);					}																			}							}			*/	});});