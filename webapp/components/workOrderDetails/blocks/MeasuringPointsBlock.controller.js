sap.ui.define([	"com/twobm/mobileworkorder/util/Controller",	"com/twobm/mobileworkorder/util/Formatter",	"sap/ui/model/SimpleType",	"sap/ui/model/ValidateException",	"sap/m/MessageBox"], function(Controller, Formatter, SimpleType, ValidateException, MessageBox) {	"use strict";	var EnumRecordedValue = {		LOWERTHANMINLIMIT: 1,		HIGHERTHANMAXLIMIT: 2,		LOWERTHANLASTREADING: 3,	};	return Controller.extend("com.twobm.mobileworkorder.components.workOrderDetails.blocks.MeasuringPointsBlock", {		formatter: Formatter,		/**		 * Called when a controller is instantiated and its View controls (if available) are already created.		 * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.		 * @memberOf com.twobm.mobileworkorder.components.workOrderDetails.view.AttachmentsBlock		 */		onInit: function() {			// Databind to measuring points from object			this.readingModel = new sap.ui.model.json.JSONModel();			this.createMeasuringPointViewerPopover();		},		createMeasuringPointViewerPopover: function() {			if (!this._oPopover) {				this._oPopover = sap.ui.xmlfragment("com.twobm.mobileworkorder.components.workOrderDetails.fragments.CreateMeasurementPopover",					this);				this._oPopover.setModel(this.readingModel, "ViewModel");				//this._oPopover.attachAfterOpen(this.resizePopup);				this._oPopover.attachBeforeClose(function() {					//Just make sure that the control minimized					//sap.ui.getCore().byId("popupImageControl").setWidth(null);				});				this.getView().addDependent(this._oPopover);			}		},		addMeasurement: function(oEvent) {			var currentObject = oEvent.getSource().getBindingContext().getObject();			currentObject.RecordedValue = null;			currentObject.Path = oEvent.getSource().getBindingContext().getPath();			this._oPopover.getModel("ViewModel").setData(currentObject);			this._oPopover.getModel("ViewModel").refresh();			this._oPopover.open();		},		closeAddMeasurement: function() {			this._oPopover.close();		},		onSubmitMeasurement: function() {			var that = this;			var viewModel = this._oPopover.getModel("ViewModel").getData();			if (viewModel.Counter === "X") {				if (viewModel.RecordedValue < parseInt(viewModel.LastReading)) {					this.validateThresholdForRecordedValue(EnumRecordedValue.LOWERTHANLASTREADING, viewModel);					return;				}			}			if (viewModel.ValueMinLimit) {				if (parseInt(viewModel.MinLimit) > viewModel.RecordedValue) {					this.validateThresholdForRecordedValue(EnumRecordedValue.LOWERTHANMINLIMIT, viewModel);					return;				}			}			if (viewModel.ValueMaxLimit) {				if (parseInt(viewModel.MaxLimit) < viewModel.RecordedValue) {					this.validateThresholdForRecordedValue(EnumRecordedValue.HIGHERTHANMAXLIMIT, viewModel);					return;				}			}			var parameters = {				success: function(oData, response) {					if (window.cordova && !window.sap_webide_FacadePreview && !window.sap_webide_companion) {						that.updateLocalMeasurementPoint(viewModel);					} else {						that.getView().byId("idMeasuringPointTable").getBinding("items").refresh();					}					that.closeAddMeasurement();				},				error: that.errorCallBackShowInPopUp			};			var dataCreate = {				Measpoint: viewModel.Measpoint,				ReadingDate: new Date(),				RecordedValue: viewModel.RecordedValue.toString(),				Orderid: viewModel.Orderid,				Fullname: this.getView().getModel("appInfoModel").getData().UserFullName			};			var createPath = "/MeasurementDocsSet";			this.getView().getModel().create(createPath, dataCreate, parameters);		},		validateThresholdForRecordedValue: function(enumRecordedValue, viewModel) {			var messageText;			var messageTitleText;			var that = this;			switch (enumRecordedValue) {				case EnumRecordedValue.LOWERTHANMINLIMIT:					messageText = this.getI18nText("WorkOrderDetails-MeasuringPointsBlock-LowerLimitAlertText");					messageTitleText = this.getI18nText("WorkOrderDetails-MeasuringPointsBlock-LowerLimitAlertTitleText");					break;				case EnumRecordedValue.HIGHERTHANMAXLIMIT:					messageText = this.getI18nText("WorkOrderDetails-MeasuringPointsBlock-HigherLimitAlertText");					messageTitleText = this.getI18nText("WorkOrderDetails-MeasuringPointsBlock-HigherLimitAlertTitleText");					break;				case EnumRecordedValue.LOWERTHANLASTREADING:					messageText = this.getI18nText("WorkOrderDetails-MeasuringPointsBlock-LowerThanLastReadingAlertText");					messageTitleText = this.getI18nText("WorkOrderDetails-MeasuringPointsBlock-LowerThanLastReadingAlertTitleText");					var bCompact = !!this.getView().$().closest(".sapUiSizeCompact").length;					MessageBox.show(messageText, {						icon: MessageBox.Icon.NONE,						title: messageTitleText,						actions: [MessageBox.Action.OK],						defaultAction: MessageBox.Action.OK,						styleClass: bCompact ? "sapUiSizeCompact" : ""					});					return;				default:					return;			}			var bCompact = !!this.getView().$().closest(".sapUiSizeCompact").length;			MessageBox.show(messageText, {				icon: MessageBox.Icon.WARNING,				title: messageTitleText,				actions: [MessageBox.Action.YES, MessageBox.Action.NO],				defaultAction: MessageBox.Action.YES,				styleClass: bCompact ? "sapUiSizeCompact" : "",				onClose: function(oAction, object) {					if (oAction === sap.m.MessageBox.Action.YES) {						var parameters = {							success: function(oData, response) {								if (window.cordova && !window.sap_webide_FacadePreview && !window.sap_webide_companion) {									that.updateLocalMeasurementPoint(viewModel);								} else {									that.getView().byId("idMeasuringPointTable").getBinding("items").refresh();								}								that.closeAddMeasurement();							},							error: that.errorCallBackShowInPopUp						};						var dataCreate = {							Measpoint: viewModel.Measpoint,							ReadingDate: new Date(),							RecordedValue: viewModel.RecordedValue.toString(),							Orderid: viewModel.Orderid,							Fullname: that.getView().getModel("appInfoModel").getData().UserFullName						};						var createPath = "/MeasurementDocsSet";						that.getView().getModel().create(createPath, dataCreate, parameters);					}				}			})		},		updateLocalMeasurementPoint: function(viewModel) {			var that = this;			var parameters = {				success: function(oData, response) {					that.getView().byId("idMeasuringPointTable").getBinding("items").refresh();				},				error: that.errorCallBackShowInPopUp			};			var dataUpdate = {				LastReadingBy: this.getView().getModel("appInfoModel").getData().UserFullName, //"Lau Lautrup",				LastReading: viewModel.RecordedValue			};			this.getView().getModel().update(viewModel.Path, dataUpdate, parameters);		},		orderStatusValid: function(str) {			var oContext = this.getView().getBindingContext();			var model = this.getView().getModel();			return !this.readOnly(oContext, model);		},		onMeasuringPointItemPress: function(oEvent) {			var oBindingContext = oEvent.getSource().getBindingContext();			var data = {				"block": "measurement",				"measurementContext": oBindingContext.getPath().substr(1)			};			this.gotoMeasurementDetailsPage(data);		},		gotoMeasurementDetailsPage: function(data) {			var eventBus = sap.ui.getCore().getEventBus();			eventBus.publish("BlockNavigation", data);		},		showTextForMaxValue: function(maxValue, isAvailable){			if(isAvailable){				return maxValue;			}			else			{				var text = this.getI18nText("WorkOrderDetails-MeasuringPointsBlock-PopOverHigherLimitNotAvailableText");				return text;			}		},		showTextForMinValue: function(minValue, isAvailable){			if(isAvailable){				return minValue;			}			else			{				var text = this.getI18nText("WorkOrderDetails-MeasuringPointsBlock-PopOverLowerLimitNotAvailableText");				return text;			}		}	});});