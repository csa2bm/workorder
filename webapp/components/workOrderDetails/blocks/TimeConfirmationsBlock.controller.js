sap.ui.define([	"com/twobm/mobileworkorder/util/Controller",	"sap/ui/model/SimpleType",	"sap/ui/model/ValidateException",	"sap/m/MessageToast",	"sap/ui/core/format/NumberFormat",	"sap/m/MessageBox",	"sap/ui/core/format/DateFormat"], function(Controller, SimpleType, ValidateException, MessageToast, NumberFormat, MessageBox,DateFormat) {	"use strict";	return Controller.extend("com.twobm.mobileworkorder.components.workOrderDetails.blocks.TimeConfirmationsBlock", {		onInit: function() {			this.createTimeConfirmationPopover();			//Subscribe to events			var eventBus = this.getEventBus();			eventBus.subscribe("TimeRegistrationTimerStopped", this.createTimeRegistrationFromTimer, this);		},		createTimeConfirmationPopover: function() {			if (!this._oPopover) {				this._oPopover = sap.ui.xmlfragment("TimeConfirmationPopover",					"com.twobm.mobileworkorder.components.workOrderDetails.fragments.TimeConfirmationPopover", this);				this.getView().addDependent(this._oPopover);				//This should happen when the 				// this._oPopover.attachBeforeClose(function(oEvent) {				// 	var that = this;				// 	this.closeAddTimeRegistrationPopover(oEvent);				// });				//Create Event Handling for timeTypeErrors				this._oPopover.attachValidationError(function(evt) {					var control = evt.getParameter("element");					if (control && control.setValueState) {						control.setValueState("Error");					}				});				this._oPopover.attachValidationSuccess(function(evt) {					var control = evt.getParameter("element");					if (control && control.setValueState) {						control.setValueState("None");					}				});				var timeInputField = sap.ui.core.Fragment.byId("TimeConfirmationPopover", "WorkTimeConfirmationField");				timeInputField					.addEventDelegate({						onAfterRendering: function() {							//Set focus							// 	timeInputField.focus();							//Reset any error state on input field							timeInputField.setValueState("None");						},						onfocusin: function() {							//Select text							var length = timeInputField.getValue().length;							timeInputField.selectText(0, length);						}					});			}		},		createTimeRegistrationFromTimer: function(a, b, data) {			var oTimeModel = {				ActWork: this.formatTimerHours(data.Hours), //Work Time				ExecStartDate: new Date(), //Start date				Path: this.getView().getBindingContext().getPath() + "/ConfirmationsSet",				Fullname: this.getView().getModel("appInfoModel").getData().UserFullName,				PersNo: this.getView().getModel("appInfoModel").getData().Persno,				type: "create"			};			var createModel = new sap.ui.model.json.JSONModel(oTimeModel);			this.openTimeConfirmationPopover(createModel);		},		formatTimerHours: function(hoursFromTimer) {			//Rule for showing time			//Two decimals			return hoursFromTimer.toFixed(1); //Two decimals		},		formatFloatvalue: function(value) {			var oNumberFormat = NumberFormat.getFloatInstance();			return oNumberFormat.format(value);		},		createNewTimeRegistration: function(oEvent) {			// var currentTimeStamp = new Date(); //DateTime.now			// var utcTimeStamp = new Date(Date.UTC(currentTimeStamp.getFullYear(), currentTimeStamp.getMonth()+1, currentTimeStamp.getDay()));			var oTimeModel = {				ActWork: "", //Work Time				ExecStartDate: new Date(), //Start date utc				Path: this.getView().getBindingContext().getPath() + "/ConfirmationsSet",				Fullname: this.getView().getModel("appInfoModel").getData().UserFullName,				PersNo: this.getView().getModel("appInfoModel").getData().Persno,				type: "create"			};			var createModel = new sap.ui.model.json.JSONModel(oTimeModel);			this.openTimeConfirmationPopover(createModel);		},		updateTimeRegistration: function(oEvent) {			var timeConf = oEvent.getSource().getBindingContext().getObject();			var oTimeModel = {				ActWork: timeConf.ActWork, //Work Time				ExecStartDate: new Date(timeConf.ExecStartDate), // Start date				Path: oEvent.getSource().getBindingContext().getPath(),				Fullname: timeConf.Fullname,				PersNo: timeConf.PersNo,				type: "update"			};			var updateModel = new sap.ui.model.json.JSONModel(oTimeModel);			this.openTimeConfirmationPopover(updateModel);		},		openTimeConfirmationPopover: function(oTimeModel) {			this._oPopover.setModel(oTimeModel);			this._oPopover.open();		},		closeAddTimeRegistrationPopover: function(oEvent) {			if (this._oPopover) {				this._oPopover.close();			}		},		deleteTimeRegistration: function(oEvent) {			var that = this;			var messageText = this.getI18nText("WorkOrderDetails-TimeConfirmationPopover-ConfirmAlertText");			var messageTitleText = this.getI18nText("WorkOrderDetails-TimeConfirmationPopover-ConfirmAlertTitleText");			var bCompact = !!this.getView().$().closest(".sapUiSizeCompact").length;			MessageBox.show(messageText, {				icon: MessageBox.Icon.NONE,				title: messageTitleText,				actions: [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.NO],				defaultAction: sap.m.MessageBox.Action.NO,				styleClass: bCompact ? "sapUiSizeCompact" : "",				onClose: function(oAction, object) {					if (oAction === sap.m.MessageBox.Action.YES) {						var deletePath = that._oPopover.getModel().getData().Path;						that.closeAddTimeRegistrationPopover();						that.getView().getModel().remove(deletePath, {							success: function() {								that.getView().byId("TimeConfirmationsList").getBinding("items").refresh(true);							},							error: function(error) {								this.errorCallBackShowInPopUp(error);							}.bind(this)						});					} else {						return;					}				}			});		},		postTimeRegistration: function(oEvent) {			var workTimeField = sap.ui.core.Fragment.byId("TimeConfirmationPopover", "WorkTimeConfirmationField");			if (!workTimeField.getValue()) {				// No value				return;			}			//Check if empty			var valueWithComma = workTimeField.getValue().replace(/,/g, '.');			var parsedFloat = parseFloat(valueWithComma);			if (parsedFloat === 0) {				return;			}			var oTimeData = this._oPopover.getModel().getData();			var that = this;			//Parameters for Posts			var parameters = {				success: function(oData, response) {					that.getView().byId("TimeConfirmationsList").getBinding("items").refresh(true);				},				error: function(error) {					this.errorCallBackShowInPopUp(error);				}.bind(this)			};			//Check to see if time entry validated properly			if (workTimeField.getValueState() !== "Error") {				this.closeAddTimeRegistrationPopover();				//Check to see if the time registration is create or update				if (oEvent.getSource().getModel().getProperty("/type") === "update") {					//Delete existing confirmation					var deletePath = oTimeData.Path;					this.getView().getModel().remove(deletePath, {						success: function() {							var currentTimeStamp = new Date(oTimeData.ExecStartDate);							/*							var utcTimeStamp = new Date(currentTimeStamp.getUTCFullYear(), currentTimeStamp.getUTCMonth(), currentTimeStamp.getUTCDate(),								currentTimeStamp.getUTCHours(), currentTimeStamp.getUTCMinutes(), currentTimeStamp.getUTCSeconds());*/							//new Date(Date.UTC(currentTimeStamp.getFullYear(), currentTimeStamp.getMonth(), currentTimeStamp.getDate()));							var startDateStr = that.convertStartDateToString(currentTimeStamp);							//Create new confirmation							var oData = {								ActWork: oTimeData.ActWork,								Startdatetime: startDateStr, //oTimeData.ExecStartDate,								Fullname: oTimeData.Fullname,								PersNo: oTimeData.PersNo							};							var createPath = that.getView().getBindingContext().getPath() + "/ConfirmationsSet";							that.getView().getModel().create(createPath, oData, parameters);						},						error: function(error) {							this.errorCallBackShowInPopUp(error);						}.bind(this)					});				} else {					//This is handling of Create					var oTimeData = this._oPopover.getModel().getData();					var currentTimeStamp = new Date(oTimeData.ExecStartDate);					/*var utcTimeStamp = new Date(Date.UTC(currentTimeStamp.getFullYear(), currentTimeStamp.getMonth(), currentTimeStamp.getDate(),						currentTimeStamp.getUTCHours(), currentTimeStamp.getUTCMinutes(), currentTimeStamp.getUTCSeconds()));					*/					var startDateStr = this.convertStartDateToString(currentTimeStamp);					/*										var timeZoneOffset = currentTimeStamp.getTimezoneOffset();										// TimeZoneOffset returns the difference between UTC and locale time in minutes.										//example GMT+2 returns -120										if (timeZoneOffset > 0) {											utcTimeStamp.setTime(utcTimeStamp.getTime() + 1 * 86400000); // add 1 day if offset is positive										}										*/					//Create Post object					var oData = {						Startdatetime: startDateStr, //oTimeData.ExecStartDate,						ActWork: oTimeData.ActWork,						Fullname: oTimeData.Fullname,						PersNo: oTimeData.PersNo					};					this.getView().getModel().create(oTimeData.Path, oData, parameters);				}			}		},		typeTimeFormat: SimpleType.extend("typeTimeFormat", {			formatValue: function(oValue) {				//Format the given value in model representation to an output value in the given internal type.				if (!oValue) {					return oValue;				}				//Convert to localized UI lang format				var oNumberFormat = NumberFormat.getFloatInstance();				return oNumberFormat.format(oValue);			},			parseValue: function(oValue) {				//Parse a value of an internal type to the expected value of the model type.				//Service only accept "." as comma				//convert "," to "."				return oValue.replace(/,/g, '.');			},			validateValue: function(oValue) {				//Validate whether a given value in model representation is valid and meets the defined constraints (if any).				//If more than one comma - fail				var dots = oValue.match(/\./g);				if (dots && dots.length > 1) {					throw new ValidateException();				}				//Fail if no value has been entered				if (!oValue) {					throw new ValidateException();				}				//Fail if regex not validating				var timeTypeRegex = /^[0-9.,]+$/;				if (!oValue.match(timeTypeRegex)) {					throw new ValidateException();				}				//Fail if value is above 24 or below 0				if ((oValue > 24) || (oValue <= 0)) {					throw new ValidateException();				}			}		}),		// Function that shows right arrow appear/disappear based on read-only rules		editTimeConfirmationEnabled: function(persNoOnConf) {			var loggedInUserPersNo = this.getView().getModel("appInfoModel").getData().Persno;			if (persNoOnConf === loggedInUserPersNo) {				return true;			} else {				return false;			}		},		checkConfEditStatus: function(persNoOnConf) {			var orderStatus = this.getView().getModel().getProperty("OrderStatus", this.getView().getBindingContext());			var loggedInUserPersNo = this.getView().getModel("appInfoModel").getData().Persno;			if (persNoOnConf === loggedInUserPersNo) {				return "Active";			} else {				return "Inactive";			}		},		isDeleteable: function(type) {			if (type === "update") {				return true;			} else {				return false;			}		},		getPopOverTitle: function(type) {			if (type === "update") {				return this.getI18nText("WorkOrderDetails-TimeConfirmationPopover-TitleEdit");			} else {				return this.getI18nText("WorkOrderDetails-TimeConfirmationPopover-TitleCreate");			}		},		getTodaysDaysDate: function() {			return new Date();		},				convertStartDateToString: function(date){			var oDateFormat = DateFormat.getInstance({pattern: "YYYYMMdd"});			return oDateFormat.format(date);		}	});});